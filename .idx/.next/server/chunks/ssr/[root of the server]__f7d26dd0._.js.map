{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/extract-prescription-details.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Extracts medicine details (name, dosage, frequency, etc.) from a prescription image.\n *\n * - extractPrescriptionDetails -  A function that handles the prescription details extraction process.\n * - ExtractPrescriptionDetailsInput - The input type for the extractPrescriptionDetails function.\n * - ExtractPrescriptionDetailsOutput - The return type for the extractPrescriptionDetails function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ExtractPrescriptionDetailsInputSchema = z.object({\n  prescriptionImage: z\n    .string()\n    .describe(\n      \"A photo of a handwritten prescription, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n});\nexport type ExtractPrescriptionDetailsInput = z.infer<\n  typeof ExtractPrescriptionDetailsInputSchema\n>;\n\nconst MedicineDetailsSchema = z.object({\n  medicineName: z.string().describe('The name of the medicine.'),\n  dosage: z.string().describe('The dosage of the medicine (e.g., 500mg).'),\n  frequency: z\n    .string()\n    .describe('How often the medicine should be taken (e.g., twice daily).'),\n  duration: z\n    .string()\n    .describe('How long the medicine should be taken for (e.g. 7 days).')\n    .optional(),\n  routeOfAdministration: z\n    .string()\n    .describe('How the medicine should be administered (e.g. orally, topical).')\n    .optional(),\n  instructions: z\n    .string()\n    .describe('Any special instructions (e.g., with food, before bed).')\n    .optional(),\n});\n\nconst ExtractPrescriptionDetailsOutputSchema = z.object({\n  medicines: z.array(MedicineDetailsSchema).describe('List of extracted medicines with details.'),\n  doctorName: z.string().describe('The name of the doctor.').optional(),\n  clinicInformation: z.string().describe('The clinic information.').optional(),\n  patientName: z.string().describe('The patient name.').optional(),\n  dateOfPrescription: z.string().describe('The date of the prescription.').optional(),\n});\nexport type ExtractPrescriptionDetailsOutput = z.infer<\n  typeof ExtractPrescriptionDetailsOutputSchema\n>;\n\nexport async function extractPrescriptionDetails(\n  input: ExtractPrescriptionDetailsInput\n): Promise<ExtractPrescriptionDetailsOutput> {\n  return extractPrescriptionDetailsFlow(input);\n}\n\nconst extractPrescriptionDetailsPrompt = ai.definePrompt({\n  name: 'extractPrescriptionDetailsPrompt',\n  input: {schema: ExtractPrescriptionDetailsInputSchema},\n  output: {schema: ExtractPrescriptionDetailsOutputSchema},\n  prompt: `You are a medical expert extracting information from a prescription image.\n  Extract the following information for each prescribed item:\n  - Medicine Name\n  - Dosage\n  - Frequency\n  - Duration (if available)\n  - Route of Administration (if available)\n  - Instructions (if available)\n\n  Also, attempt to extract:\n  - Doctor's Name\n  - Clinic Information\n  - Patient Name (if available)\n  - Date of Prescription (if available)\n\n  Structure the output clearly, associating all details with the respective medicine.\n\n  Prescription Image: {{media url=prescriptionImage}}\n  `,\n});\n\nconst extractPrescriptionDetailsFlow = ai.defineFlow(\n  {\n    name: 'extractPrescriptionDetailsFlow',\n    inputSchema: ExtractPrescriptionDetailsInputSchema,\n    outputSchema: ExtractPrescriptionDetailsOutputSchema,\n  },\n  async input => {\n    const {output} = await extractPrescriptionDetailsPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,mBAAmB,uIAAA,CAAA,IAAC,CACjB,MAAM,GACN,QAAQ,CACP;AAEN;AAKA,MAAM,wBAAwB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,WAAW,uIAAA,CAAA,IAAC,CACT,MAAM,GACN,QAAQ,CAAC;IACZ,UAAU,uIAAA,CAAA,IAAC,CACR,MAAM,GACN,QAAQ,CAAC,4DACT,QAAQ;IACX,uBAAuB,uIAAA,CAAA,IAAC,CACrB,MAAM,GACN,QAAQ,CAAC,mEACT,QAAQ;IACX,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CAAC,2DACT,QAAQ;AACb;AAEA,MAAM,yCAAyC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtD,WAAW,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uBAAuB,QAAQ,CAAC;IACnD,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC,2BAA2B,QAAQ;IACnE,mBAAmB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC,2BAA2B,QAAQ;IAC1E,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC,qBAAqB,QAAQ;IAC9D,oBAAoB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC,iCAAiC,QAAQ;AACnF;AAKO,eAAe,uCAAwB,GAAxB,2BACpB,KAAsC;IAEtC,OAAO,+BAA+B;AACxC;AAEA,MAAM,mCAAmC,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACvD,MAAM;IACN,OAAO;QAAC,QAAQ;IAAqC;IACrD,QAAQ;QAAC,QAAQ;IAAsC;IACvD,QAAQ,CAAC;;;;;;;;;;;;;;;;;;EAkBT,CAAC;AACH;AAEA,MAAM,iCAAiC,mHAAA,CAAA,KAAE,CAAC,UAAU,CAClD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,iCAAiC;IACxD,OAAO;AACT;;;IAxCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 323, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 374, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 388, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 402, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}